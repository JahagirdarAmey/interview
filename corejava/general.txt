1. What is java?
- OOPL
- PI / Portable 
- Multi threaded (?)
- Secure (?)

2.Is java 100% object oriented ?
- No, As it contains premitive types such as int, float, double.  



3. What is JVM ?
- Java virtual machine 
- Which can execute java bytecode 

4. Why is Java called the Platform Independent Programming Language?
- No need to re-write or re-compile 
- JVM takes care

5.Is JVM Platform specific? Why ?

6. JDK vs JRE ?
- JRE 
	- is where java programs are being executed 
	- It is a jvm implementation 
- JDK is SDK for Java including JRE + development tools (compilers, debugger)

7. Static
- Static variable
	- No need to instantiate java object. Can be called directly using java class
	- Accessing not-static varibales in static context
		- A static variables belong to class & its value remains same for all its instances 
		- A static variable is initialized when the class is loaded by the JVM. 
		- If your code tries to access a non-static variable, without any instance, the compiler will complain, because those variables are not created yet and they are not associated with any instance.
- Static method
	- No need to instantiate java object. Can be called directly using java class
	- Static method can not be overriden. Why ? -  method overriding is based upon dynamic binding at runtime and static methods are statically bound at compile time.
- Static class
- Static block 	

8. Premitive data types in java 
- byte
- short
- int
- long
- float
- double
- boolean
- char

9. What is Autoboxing and Unboxing?
- Autoboxing is the automatic conversion made by the Java compiler between the primitive types and their corresponding object wrapper classes. - int to an Integer, a double to a Double, and so on. 
- If the conversion goes the other way, this operation is called unboxing.
- Wrapper classes 
	- java primitives into objects
	

10. What is Function Overriding and Overloading in Java?
- Overloading - two or more methods in the same class have the exact same name, but different parameters. 
- Overriding -  when a child class redefines the same method as a parent class. Overridden methods must have the same name, argument list, and return type. 

11. Constructor 
- A constructor gets invoked when a new object is created.
- Every class has a constructor. In case the programmer does not provide a constructor for a class, the Java compiler (Javac) creates a default constructor for that class.
- Constructor overloading - similar to method overloading
- Copy-constructor 
	- Java supports copy constrcutors (From JDK ?)
	- Difference from C++ - Java does not create a default copy constructor if you do not write your own.
	- public class Employee extends Person   
	{  
    		private String name;
     
    		public Employee(String name)
    		{
     		 this.name = name;
    		}
     
    		public Employee(Employee emp)
    		{
      		this.name = emp.name;
    		}
	} 
	
12.Does java support multiple inheritance ?
- No, A class can extend one class only, But can implement multiple inheritance. 

13. Interface 
- All methods in interface are abstract impliitly (Explicit abstract allowd?)
- Variables are final implicitly. (Explicit final allowed?) 
- Members are public by default. (Can it be private ?)
- Implementing class must implement abstrat methods
- Cannot be instantiated
- What is not allowed ?

14. Abstract 
- Abstract class may contain abstract methods and non-abstract(concret) methods 
- Implementing class must implement abstrat methods, If does not, Implementing class also must be abstract 
- Abstract classes can implement interfaces without even providing the implementation of interface methods.
- An abstract class may contain non-final variables.
- An abstract class also cannot be instantiated but can be invoked if it contains the main method.
- What is not allowed ?

15. What are pass by reference and pass by value?
- Pass by value 
	- When an object is passed by value, this means that a copy of the object is passed.
	public class ComputingEngine 
	{ 
	    public static void main(String[] args) 
	    { 
        	int x = 15;
        	ComputingEngine engine = new ComputingEngine();
        	engine.modify(x); 
        	System.out.println("The value of x after passing by value "+x); 
    	    } 
   	    public  void modify(int x) 
  	   { 
        	x = 12; 
    	   } 
	}
- Pass by reference
	- When an object is passed by reference, this means that the actual object is not passed, rather a reference of the object is passed.
	- Thus, any changes made by the external method, are also reflected in all places.
	public class ComputingEngine 
	{ 
	    public static void main(String[] args) 
    	    { 
         
        	ComputingEngine engine = new ComputingEngine();
         
		
		Computation computation = new Computation(65);
        	engine.changeComputedValue(computation);
         
        	System.out.println("The value of x after passing by reference "+ computation.x);
	    } 
     
   	 public void changeComputedValue(Computation computation)
    	   {
        	computation = new Computation();
        	computation.x = 40;
    	   }
	}
  
	class Computation 
	{ 
    		int x; 
    		Computation(int i) { x = i; } 
		Computation()      { x = 1; } 
	}


16. Local variables vs instance variables 
- Local variabls 
	- inside method or constructor or block
	- Need to be initialised, Oterwise code will not compile.
- Instance varaibes
	- Inside class or class level
	- If not initialised, default value is used

17. Access modifiers 
- Public - accesible from everywhere in app
- Protected - accessible within the package and the subclasses in any package
- Package Private (Default) – accessible strictly within the package
- Private – accessible only within the same class where it is declared

18. Difference between static binding and dynamic binding
- Static binding 
	- Binding at compile time 
	- Shape s = new Shape();
- Dynamic binding 
	- Binding at run time
	- Shape s = new Rectangle();

19. What’s the difference between String, StringBuffer andStringBuilder?

20. Clonable



