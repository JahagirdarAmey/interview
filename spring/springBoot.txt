1. What is Spring boot ?
- Spring module OR  another Java framework from Sring umbrella. 
- Provides RAD (Rapid application development) features to sping framework
- Used to create standalone spring based application 

2. What is RAD ? 
When I refere to RAD. I refer to leveraging existing services, frameworks, components, patterns, avoiding boilerplate for application development.  

3. How to create Spring boot app ?
- Spring maven project
- Spring initializr 
- Spring boot CLI
- Spring boot wizard, Spring STS | Intellij Ultimate

4. What is Spring bean? 
- Spring beans are Java objects that are managed by the Spring container.

5. What is Spring container? 
- The Spring container is responsible for instantiating, configuring, and assembling the Spring beans.

6. What is IoC container ?

7. Example of Spring bean?

@Setter
@Getter
public class HelloWorld { 
   private String message;   
 }  

In the XML-based configuration, beans.xml supplies the metadata for the Spring container to manage the bean.

Here is an example of how we configure our HelloWorld POJO for the IoC container:
<?xml version = "1.0" encoding = "UTF-8"?>
<beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
   <bean id = "helloWorld" class = "com.zoltanraffai.HelloWorld">
      <property name = "message" value = "Hello World!"/>
   </bean>
</beans>


8. What is BeanFactory 
- root interface for accessing the Spring container.
- Features 
	- Bean instantiation/wiring
	- Usually, the implementations use lazy loading, which means that beans are only instantiating when we directly calling them through the getBean() method.
	- The most used API that implements the BeanFactory is the XmlBeanFactory.
	- Example 
		      XmlBeanFactory factory = new XmlBeanFactory (new ClassPathResource("beans.xml")); 
			  HelloWorld obj = (HelloWorld) factory.getBean("helloWorld");    
			  obj.getMessage();    


9. What is application context ?
- The Application Context is Spring's advanced container.
- used for providing configuration information to the application.
- It implements the BeanFactory interface. Hence, the ApplicationContext includes all functionality of the BeanFactory and much more
- Features -  Bean instantiation/wiring, Automatic BeanPostProcessor registration, Automatic BeanFactoryPostProcessor registration, Convenient MessageSource access (for i18n)
- It uses eager loading, so every bean instantiate after the ApplicationContext is started up.
- Example 
      ApplicationContext context=new ClassPathXmlApplicationContext("beans.xml"); 
      HelloWorld obj = (HelloWorld) context.getBean("helloWorld");    
      obj.getMessage();    

10. Difference Between BeanFactory and ApplicationContext in Spring 
- where memory consumption might be critical. In those scenarios, it would be justifiable to use the more lightweight BeanFactory. However, in most enterprise applications, the ApplicationContext is what you will want to use.


11. Spring boot common annotations 
- @SpringBootApplication - @Configuration, @ComponentScan , @EnableAutoConfiguration 
- @RestController, @Controller, @Service @Repository, @Component  

12. Explain @SpringBootApplication
- @Configuration
	- Tags the class as a source of bean definitions for the application context.
- @ComponentScan 
	- Tells Spring to look for other components, configurations, controllers and services in the com/example package.
- @EnableAutoConfiguration 
	-Tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings. 
	- Example - If spring-webmvc is on the classpath, this annotation flags the application as a web application and activates key behaviors, such as setting up a DispatcherServlet.
	
	
13. What is REST & Content negotiation ? 
- REST stands for REpresentational State Transfer.
- There is no restriction on what can be a resource. A todo is a resource. A person on facebook is a resource.
- A resource can have multiple representation - XML, HTML, JSON 
- When a resource is requested, we provide the representation of the resource.

14. What is SOAP ?

15. SOAP vs REST ?
	
16. @RestController vs @Controller
- The @RestController annotation in Spring MVC is nothing but a combination of @Controller and @ResponseBody annotation.
- It was added into Spring 4.0 to make the development of RESTful Web Services in Spring framework easier. 
- In short, the following two code snippet are equal in Spring MVC:
@Controller
@ResponseBody
public class MVCController { 
   .. your logic
}

@RestController
public class RestFulController { 
  .... your logic
}

17. What does @RequestBody & @ResponseBody do ? 
- @RequestBody -  @RequestBody annotation maps the HttpRequest body to a transfer or domain object, enabling automatic deserialization of the inbound HttpRequest body onto a Java object.
- @ResponseBody annotation tells a controller that the object returned is automatically serialized into JSON and passed back into the HttpResponse object.

18. HttpRequest & HttpResponse ?

19. Content type  OR content negotiation 
- Content Negotiation helps the Consumer and Provider interact about the data exchange format.



7. Explain @Controller with example 



7. 

4. Advantages of Spring boot ?
- Stand-alone app 
- Auto configuration
- Embedded tomcat
- Opiniated starter POMs 
	- Set of convinient dependencies 
	- Just JARs
	- Used to auto resolve dependencies 
	- Transitively Dependency Resolution Management. A -> B,B -> C, A -> C
	- Example - spring-boot-starter-web. Which includes Spring mvc, REST, tomcat, Jakson, Validation - Hibernate Validator, Validation API, loggers etc on classpath
- Spring initizr 
- Integrates with Spring Ecosystem like Spring JDBC, Spring ORM, Spring Data, Spring Security easily by avoiding boilerplate code.
- Spring CLI


4. Spring boot annotations ?
- @RestController
	- It adds @Controller & @ResponseBody to class
	- @Controller
	- @ResponseBody

5. Spring boot dependency management ?
- Manages dependency and configurations automatically 
- Don't need to mention version, ?
- Spring boot upgrades all dependencies automatically when you upgrade spring boot

6. Spring boot properties
- either in .properties OR in .yml
- Generally used in externalised configuration

7. Spring boot actuator ?
- To monitor app
- Provides managed HTTP endpoints 
- Example ? - env, health,mappings, httptrace?

8. Thymeleaf ?
- server side java template engine 
- Alternatives ?
- Can be integrated with spring and html5
- spring-boot-starter-thymeleaf

9.Spring vs Spring boot
- Spring 
	- web app framework based on java 
	- Unopiniated view
	- Provides frameworks 
- Spring boot 
	- Spring Boot is a spring module which is used to create spring application project that can just run
	- Opiniated view

10. WAR vs JAR
- The main difference between an embedded container and a WAR file is that you can Spring Boot application as a JAR from the command prompt without setting up a web server. But to run a WAR file, you need to first set up a web server like Tomcat which has Servlet container and then you need to deploy WAR there.


11. Tomcat vs Jetty

12. Spring CLI usage ?

13. How to do logging in Spring boot ? with how to configure logging level 

14. log4j vs slf4j ?

15. Mention the possible sources of external configuration
- application properties
- command line properties (Example ?)
- env variables 

16. Explain externalised properties in spring boot 

17. Spring boot dev tools ?
- set of tools and aims to make the process of developing an application easier
- Restart an app on save - LiveReload

18. what is HTTP/2. How to enable it in spring boot ?
- server.http2.enabled=true

19. auto-configuration in Spring Boot and how to disable the  auto-configuration?
- Automatically configure the required configuration for the application
- Example ?
- Default it includes ? 
- To exclude - @EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})

20. @SpringBootApplication explain
- @Configuration
- @ComponentScan 
- @EnableAutoConfiguration 

21. What is @Configuration

22. What is @componantScan 

23. What is @EnableAutoConfiguration & spring.autoconfigure.exclude property
- 

24. What is bean ? 

25. What are the steps to deploy Spring Boot web applications as JAR and WAR files?
- Add the plugin - <artifactId>spring-boot-maven-plugin</artifactId>
- <packaging>jar</packaging>

26. @Value 

27. @ConfigurationProperties

28. yaml files in spring boot. & SnakeYaml 
- The SpringApplication class supports the YAML file as an alternative to properties whenever you use the SnakeYAML library on your classpath. The different ways to load a YAML file in Spring Boot is as follows:

    Use YamlMapFactoryBean to load YAML as a Map
    Use YamlPropertiesFactoryBean to load YAML as Properties

29. Explain how to register a custom auto-configuration.

30. Web flies in spring boot ?
-static under resources folder

31. What do you understand by Spring Boot supports relaxed binding?

32.  Do you think, you can use jetty instead of tomcat in spring-boot-starter-web? How ?

33. Spring boot starters example 

    spring-boot-starter: core starter, including auto-configuration support, logging, and YAML
    spring-boot-starter-aop: starter for aspect-oriented programming with Spring AOP and AspectJ
    spring-boot-starter-data-jpa: starter for using Spring Data JPA with Hibernate
    spring-boot-starter-jdbc: starter for using JDBC with the HikariCP connection pool
    spring-boot-starter-security: starter for using Spring Security
    spring-boot-starter-test: starter for testing Spring Boot applications
    spring-boot-starter-web: starter for building web, including RESTful, applications using Spring MVC


34. How Can We Set up a Spring Boot Application With Maven?

35. How to Tell an Auto-Configuration to Back Away When a Bean Exists?

36. @ConditionalOnMissingBean 

37. Explain RAD model

38. What are the commands to run and stop Spring Boot executable jar file?
- java -jar myproject-0.0.1-SNAPSHOT.jar & ctrl c

39.  run Spring Boot application on the custom port?
- server.port=8050

40. Boot admin

41.  What are embedded containers support by Spring & their usage
- Tomcat
- Jetty
- Undertow 

42. What do you mean by hot-swapping in Spring Boot?
- It is a way to reload the changes without restarting Tomcat, or Jetty server.
- Needs IDE support 

43. Set profile in spring boot

44. What is “Transitively Dependency Resolution Management”?
- “A” is dependent on “B” and “B” is dependent on “C”, That means “A” is also dependent on “C”

45. How to exclude any package without using the basePackages filter?
- @SpringBootApplication(exclude= {Employee.class})

46. How to enable HTTPS/SSL support in Spring boot?
server.port=8443
server.ssl.key-alias=selfsigned_localhost_sslserver
server.ssl.key-password=changeit
server.ssl.key-store=classpath:ssl-server.jks
server.ssl.key-store-provider=SUN
server.ssl.key-store-type=JKS

47. Java config vs xml config with example 

48. auto configuration without spring boot

49. minimum baseline Java Version for Spring Boot 2 and Spring 5?

50. Whats new in Spring boot 2

51. Why do we need spring-boot-maven-plugin?
spring-boot-maven-plugin provides a few commands which enable you to package the code as a jar or run the application

    spring-boot:run runs your Spring Boot application.
    spring-boot:repackage repackages your jar/war to be executable.
    spring-boot:start and spring-boot:stop to manage the lifecycle of your Spring Boot application (i.e. for integration tests).
    spring-boot:build-info generates build information that can be used by the Actuator.

52. Why embedded servers ?

Think about what you would need to be able to deploy your application (typically) on a virtual machine.

    Step 1 : Install Java
    Step 2 : Install the Web/Application Server (Tomcat/Websphere/Weblogic etc)
    Step 3 : Deploy the application war

How about making the server a part of the application?
- You would just need a virtual machine with Java installed and you would be able to directly deploy the application on the virtual machine.

53. HAL broswer ?

54. How to generate a WAR file with Spring Boot?

Recommended Reading
    https://spring.io/guides/gs/convert-jar-to-war/

Here’s the direct link to spring documentation
    https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-maven-packaging

55. How to deploy to a different server with with Spring Boot?

    Generate a war from the project.
    Deploy it to your favourite server (Websphere or Weblogic or Tomcat or …).


56. What is Spring data rest & Why do we recommend not to use Spring Data Rest in real world applications?

57. In which layer, should the boundary of a transaction start?

We recommend managing transactions in the Service layer. Logic for business transactions is in the business/service layer and you would want to enforce transaction management at that level.




