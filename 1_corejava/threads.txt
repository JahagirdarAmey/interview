1. Processes vs Threads?
- Process 
	- A program in execution 
	- A process can contain multiple threads
	- A process communicates - IPC
	- Processes get executed in separate memory spaces.
	- OS controlls process
- Threads
	- Thread is a single execution sequence within a process. 
	- A Thread is sometimes called a lightweight process
	- Threads of a process can communicate with each other.
	- Threads are executed in shared memory spaces.
	- Software controlls threads 

2. Ways of creating a thread
- A class may extend the Thread class.
- A class may implement the Runnable interface.
- An application can use the Executor framework, in order to create a thread pool. 
- Preferd way 
	- The Runnable interface is preferred, as it does not require an object to inherit the Thread class. (How ?)
	- In case your application design requires multiple inheritance, only interfaces can help you.

3. What are locks

4. Monitor ?
- Watches over a sequence of synchronized code and ensuring that only one thread at a time executes a synchronized piece of code
- The thread is not allowed to execute the code until it obtains the lock.

4. Thread states
- NEW: The thread becomes ready to run, but does not necessarily start running immediately.
- RUNNABLE: The Java Virtual Machine (JVM) is actively executing the threadâ€™s code.
- BLOCKED: The thread is in a blocked state while waiting for a monitor lock.(?)
- WAITING: The thread waits for another thread to perform a particular action.
- TERMINATED: The thread has finished its execution. (What happens to thread then?)

5. What is the difference between a method and block that are synchronized?
- In Java programming, each object has a lock. A thread can acquire the lock for an object by using the synchronized keyword. 
- The synchronized keyword can be applied in a method level (coarse-grained lock) or block level of code (fine-grained lock).

6. Volatile Variable?
- Volatile variable values can be modified by different threads.
- They will never have the chance to block and hold a lock. Block ? lock ?
- Synchronization will happen whenever the variables are accessed.
- Using volatile may be faster than a lock, but it will not work in some situations.What situations ?
- public volatile int count = 0;

7. Transient variable?
- A transient variable would not be serialized even if the class to which it belongs is serialized.
- Use ?

8. What is deadlock ?
- A condition that occurs when two processes are waiting for each other to complete, before proceeding. 
- The result is that both processes wait endlessly.

9. How do you ensure that N threads can access N resources without deadlock?
- A very simplae way to avoid deadlock while using N threads is to impose an ordering on the locks and force each thread to follow that ordering 
- Thus, if all threads lock and unlock the mutexes in the same order, no deadlocks can arise.

10. Mutexes 

11. Explan notify(), notifyAll(), interrupt()

11.  What are the differences between wait and sleep method in Java?
Wait 
	- Wake up condition - until call notify(), notifyAll() from object
	- Used for time-synchronization
	- release the lock for other objects to have the chance to execute
Sleep 
	- Wake up condition - until at least time expire or call interrupt().
	- Used for multi-thread-synchronization
	- keep lock for at least t times if timeout specified or somebody interrupt.

12. ThreadLocal
Use Case 1
- Suppose there is a task (get birthdate from DB & return in string format)
- For threads - 1/2/3/4/5, It is fine, But what if 1000 thread needs to run ? - ThreadPool of 10 T
- But it will create 1000 SimpleDateFormat object , Global SimpleDateFormat object.
- But SimpleDateFormat is not threadsafe - So it will have data integrity issue.
- A solution - can be lock - synchronisation - but it will slow down the performance
- A Mid way solution - Each T will have its own dateformat object, i.e variables specific to threads - ThreadLocal
- No synchronicastion issue, no data integrity issue.  (~ 10 simpleDatFormat object)
- Memory efficieny + Thread safety
- ThreadLocal<SimpleDateFormat>

13. Java Interrupts
- T1 (can be a main thread).  T1 starts T2. T2 is long running thread (Task thread)
- But after sometime you don't want long running thread to be completed
- But there is no cancel method in Thread
- T1 can call inturrupt() on T2. T2 may or may not stop. Its cooperative mechanism . Thread can not force another thread to stop
- Thread T2 has a chance to cleanup (data integrity / open DB connections)
- InterruptedException -
    - Runnable can not throw checked exceptions
    - InterruptedException is checked exception
    - Instead of Runnable, implement Callable
    - Throwing this EX is mechanism to know T1 that T2 is stopping
    - Example - wait, sleep, join
    - isInturrepted()

14. Semaphore
