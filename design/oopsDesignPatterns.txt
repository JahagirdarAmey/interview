
Why to use design patterns

Types
- Creational - way to create objects while hiding complexity rather than direcly using new keyword
- Structural - Concept of inheritance is used to compose interfaces and define ways to compose objects to obtain new functionalities.
- Behavioural - These design patterns are specifically concerned with communication between objects.

1. Singleton
- What ?
	- ensure class has only one instance
	- provide global access to that instance
- Why ?
- Usage ?
    - Logging class
    - Managing connection to DB
    - File manager
- How to create ?
	- declare all constructors of the class as private
	- provide a static method that returns a reference to the instance
- When not to use ? 
- Example in java ?
    - java.lang.Runtime#getRuntime()
-
class Singleton
{

    private static Singleton single_instance = null;

    public String s;

    private Singleton()
    {
        s = "Hello I am a string part of Singleton class";
    }

    public static Singleton getInstance()
    {
        if (single_instance == null)
            single_instance = new Singleton();

        return single_instance;
    }
}


2. Factory

3. Abstract Factory

4. Decorator

5. Visitor

6. State