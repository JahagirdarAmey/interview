1. What is Spring boot ?
- Spring module OR  another Java framework from Sring umbrella. 
- Provides RAD (Rapid application development) features to sping framework

2. What is RAD ? 
- leveraging existing services, frameworks, components, patterns, avoiding boilerplate for application development.  

3. How to create Spring boot app ?
- Spring maven project
- Spring initializr 
- Spring boot CLI
- Spring boot wizard, Spring STS | Intellij Ultimate


4. Spring boot common annotations 
- @SpringBootApplication - @Configuration, @ComponentScan , @EnableAutoConfiguration 
- @RestController, @Controller, @Service @Repository, @Component  


5. Advantages of Spring boot ?
- Stand-alone app 
- Auto configuration
- Embedded tomcat
- Opiniated starter POMs 
	- Set of convinient dependencies 
	- Just JARs
	- Used to auto resolve dependencies 
	- Transitively Dependency Resolution Management. A -> B,B -> C, A -> C
	- Example - spring-boot-starter-web. Which includes Spring mvc, REST, tomcat, Jakson, Validation - Hibernate Validator, Validation API, loggers etc on classpath
- Spring initizr 
- Integrates with Spring Ecosystem like Spring JDBC, Spring ORM, Spring Data, Spring Security easily by avoiding boilerplate code.
- Spring CLI


6. Spring boot dependency management 
- Manages dependency and configurations automatically 
- Don't need to mention version, 
- Spring boot upgrades all dependencies automatically when you upgrade spring boot

7. Spring boot properties
- either in .properties OR in .yml
- Generally used in externalised configuration

8. Spring boot actuator ?
- To monitor app
- Provides managed HTTP endpoints 
- Example ? - env, health,mappings, httptrace?

9. Thymeleaf ?
- server side java template engine 
- Alternatives ? mustach, apache velocity 
- Can be integrated with spring and html5
- spring-boot-starter-thymeleaf

10.Spring vs Spring boot
- Spring 
	- web app framework based on java 
	- Unopiniated view
	- Provides frameworks
    - Boilerplate code
- Spring boot 
	- Spring Boot is a spring module which is used to create spring application project that can just run
	- Opiniated view
	- less boilerplate code 

11. WAR vs JAR
- The main difference between an embedded container and a WAR file is that you can Spring Boot application as a JAR from the command prompt without setting up a web server. 
But to run a WAR file, you need to first set up a web server like Tomcat which has Servlet container and then you need to deploy WAR there.


12. Tomcat vs Jetty vs JBoss vs nginx 

13. Spring CLI usage ?
- if you want to quickly develop a Spring application
- It lets you run Groovy scripts, which means that you have a familiar Java-like syntax without so much boilerplate code. You can also bootstrap a new project or write your own command for it.
- Few commands 
	- spring {command}
	- spring help {command} - Example - spring help run
	- spring run hello.groovy (Contains single request mapping)
	- spring run hello.groovy -- --server.port=9000
	- spring jar my-app.jar *.groovy
	- spring init --dependencies=web,data-jpa my-project


14. How to do logging in Spring boot ? with how to configure logging level 
Logging framework 
- Log levels, Log destination
Spring boot comes with logging framework included, it is opinated 

- Spirng-boot-starter-web come with spring-boot-starter-logging & spring-boot-starter-logging  comes with spring-jcl (Spring commons logging bridge) - Because of this logging functionality is available 
- LogggerFactory.getLogger(*.class) from slf4j & log.info 

- slf4j is API, You need implementation 
- Logback is kind of a succcsor to log4j . So slf4j is delegating the work to logback which is available on classpath. 

- Configuration.
   Via properties
	- logging.level.root = trace
	- logging.level.package = info 
	- logging.pattern.console
	- logging.pattern.Date 
	Via xml (Inheritable xml from logback/base.xml )
	- logback-spring.xml
	- logback.xml 
	
15. Logging levels 
- Used info, debug, error widely 
- ALL, TRACE, DEBUG, INFO, WARN, ERROR, FATAL

16. Mapped Diagnostic Context (MDC)
- log4j 
- MDC.put(key, val)
- MDC.clear()
- Session correlation, to track end to end request 

17. Session & Correlation 
- In micro services, If end-2-end request needs to track. 

18. log4j vs log4j2 vs Logback?

19. Mention the possible sources of external configuration
- application properties
- command line properties (Example -  java –jar <JARFILE> --server.port = 9090)
- env variables 

20. Explain externalised properties in spring boot  ?
- Properties files - src/main/resources
- yml takes precedence over .properties if any conflict. 
- Can be used with - @Value("${property_key_name}").
- Can be used with profiles. 
	application.properties
	application-dev.properties
	application-prod.properties
- We can keep the Spring active profile properties in the single application.yml file. No need to use the separate file like application.properties.
Spring:
   profiles: dev
   application:
      name: demoservice
server:
   port: 9090

---
spring: 
   profiles: prod
   application:
      name: demoservice
server: 
   port: 4431


21. Exmplain @Value 
- Used to use external value from property file
- @Value("${property_key_name}")
- Default value is also possible to give - @Value("${spring.application.name:demoservice}")

22. Profile
- Can specify which profile - @Profile
- In tests @ActiveProfiles("dev")

23. Spring boot dev tools ?
- set of tools and aims to make the process of developing an application easier
- Restart an app on save - LiveReload

24. what is HTTP/2. How to enable it in spring boot ?
- server.http2.enabled=true
- Binary protocal 
- HTTP/2 can send multiple requests for data in parallel over a single TCP connection
- Request pipelining  

25. auto-configuration in Spring Boot and how to disable the  auto-configuration?
- Automatically configure the required configuration for the application
- Need - When we use Spring MVC, we need to configure component scan, Dispatcher Servlet, a view resolver, web jars(for delivering static content) among other things.
- To exclude - @EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})


26. What is @EnableAutoConfiguration & spring.autoconfigure.exclude property
-  To exclude - @EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})


27. What are the steps to deploy Spring Boot web applications as JAR and WAR files?
- Add the plugin - <artifactId>spring-boot-maven-plugin</artifactId>
- <packaging>jar</packaging>


28. @ConfigurationProperties
- Pulling off values from property files.
- Group of values. - @Value -> Single 
- Define bean and group
@Getter
@Setter
@ConfigurationProperties("db") -> properties starts with db 
@Configuration -> to create it as bean 
- Class DBProperties {
	
	private String connection;
	private String host;
	private int port;
}
- DBProperties Autowire to use. 

29. Autowire 
- enables you to inject the object dependency implicitly
- Autowiring can't be used to inject primitive and string values. 
- Autowires on feilds , Autowires on constructors 

30. Constructor autowire vs feild autowire, Which is better 
Constructor injection is actually recommended over field injection, and has several advantages:
- The dependencies are clearly identified. There is no way to forget one when testing, or instantiating the object in any other circumstance (like creating the bean instance explicitly in a config class)
- The dependencies can be final, which helps with robustness and thread-safety
- You don't need reflection to set the dependencies. InjectMocks is still usable, but not necessary. You can just create mocks by yourself and inject them by simply calling the constructor


31. yaml files in spring boot. & SnakeYaml 
- The SpringApplication class supports the YAML file as an alternative to properties whenever you use the SnakeYAML library on your classpath. The different ways to load a YAML file in Spring Boot is as follows:

    Use YamlMapFactoryBean to load YAML as a Map
    Use YamlPropertiesFactoryBean to load YAML as Properties

32. Explain how to register a custom auto-configuration.

33. Web flies in spring boot ?
-static under resources folder

34. What do you understand by Spring Boot supports relaxed binding?
- Spring Boot uses some relaxed rules for binding Environment properties to @ConfigurationProperties beans, so there does not need to be an exact match between the Environment property name and the bean property name.
- Example - PORT to port

35.  Do you think, you can use jetty instead of tomcat in spring-boot-starter-web? How ?
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
        <exclusions>
            <exclusion>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-tomcat</artifactId>
            </exclusion>
        </exclusions>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-jetty</artifactId>
    </dependency>
</dependencies>


36. Spring boot starters example 

    spring-boot-starter: core starter, including auto-configuration support, logging, and YAML
    spring-boot-starter-aop: starter for aspect-oriented programming with Spring AOP and AspectJ
    spring-boot-starter-data-jpa: starter for using Spring Data JPA with Hibernate
    spring-boot-starter-jdbc: starter for using JDBC with the HikariCP connection pool
    spring-boot-starter-security: starter for using Spring Security
    spring-boot-starter-test: starter for testing Spring Boot applications
    spring-boot-starter-web: starter for building web, including RESTful, applications using Spring MVC


37. How Can We Set up a Spring Boot Application With Maven?
- Spring boot artifact id, name
- Dependencies 
- Maven plugin for build 

38. How to Tell an Auto-Configuration to Back Away When a Bean Exists?

39. @ConditionalOnMissingBean 

40. What are the commands to run and stop Spring Boot executable jar file?
- java -jar myproject-0.0.1-SNAPSHOT.jar & ctrl c

41. run Spring Boot application on the custom port?
- server.port=8050

42.  What are embedded containers support by Spring & their usage
- Tomcat
- Jetty
- Undertow 

43. What do you mean by hot-swapping in Spring Boot?
- It is a way to reload the changes without restarting Tomcat, or Jetty server.
- Needs IDE support 

44. Set profile in spring boot
java -jar -Dspring.profiles.active=prod application.jar

45. What is “Transitively Dependency Resolution Management”?
- “A” is dependent on “B” and “B” is dependent on “C”, That means “A” is also dependent on “C”

46. How to exclude any package without using the basePackages filter?
- @SpringBootApplication(exclude= {Employee.class})

47. How to enable HTTPS/SSL support in Spring boot?
server.port=8443
server.ssl.key-alias=selfsigned_localhost_sslserver
server.ssl.key-password=changeit
server.ssl.key-store=classpath:ssl-server.jks
server.ssl.key-store-provider=SUN
server.ssl.key-store-type=JKS

48. minimum baseline Java Version for Spring Boot 2 and Spring 5?
- Spring Boot 2.x will no longer support Java 7 and below

49. Whats new in Spring boot 2
- Reactive support. WebFlux 
- Actuator enhanscement 

50. Why do we need spring-boot-maven-plugin?
spring-boot-maven-plugin provides a few commands which enable you to package the code as a jar or run the application
    spring-boot:run runs your Spring Boot application.
    spring-boot:repackage repackages your jar/war to be executable.
    spring-boot:start and spring-boot:stop to manage the lifecycle of your Spring Boot application (i.e. for integration tests).
    spring-boot:build-info generates build information that can be used by the Actuator.

51. Why embedded servers ?
Think about what you would need to be able to deploy your application (typically) on a virtual machine.
    Step 1 : Install Java
    Step 2 : Install the Web/Application Server (Tomcat/Websphere/Weblogic etc)
    Step 3 : Deploy the application war

52. How about making the server a part of the application?
- You would just need a virtual machine with Java installed and you would be able to directly deploy the application on the virtual machine.

53. HAL broswer ?
- JSON Hypertext Application Language, or HAL, is a simple format that gives a consistent and easy way to hyperlink between resources in our API.

54. How to generate a WAR file with Spring Boot?
- You need to extend ****SpringBootServletInitializer**** in your @SpringBootApplication
- You don't need to add the ****sprinng-boot-starter-tomcat**** dependency for war file generation
- <packaging>war</packaging>
- Run as maven install would create WAR inside target folder 

55.How to deploy to a different server with with Spring Boot?
    Generate a war from the project.
    Deploy it to your favourite server (Websphere or Weblogic or Tomcat or …).

56.What is Spring data rest & Why do we recommend not to use Spring Data Rest in real world applications?  
- 
<dependency>
	    <groupId>org.springframework.boot</groupId
	    <artifactId>spring-boot-starter-data-rest</artifactId></dependency>
<dependency>
- makes it easy to build hypermedia-driven REST web services that connect to Spring Data repositories – all using HAL as the driving hypermedia type.

57. HATEOAS

58. In which layer, should the boundary of a transaction start?

We recommend managing transactions in the Service layer. Logic for business transactions is in the business/service layer and you would want to enforce transaction management at that level.

59. @Qualifier